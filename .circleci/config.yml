# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Orchestrate or schedule a set of jobs
defaults: &defaults
  docker:
    - image: alpine:latest

commands:
  print_pipeline_id:
    parameters:
      pipeline_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run: echo << parameters.pipeline_id >>

jobs:
  # print_hello:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         command: echo hello
  #         name: echo Hello
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         command: echo world
  # print_project-author:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run:
  #         name: "echo an env var with the name of the project author"
  #         command: |
  #           echo $PROJECT_AUTHOR
  save_hello_world_output:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: "echo an hello world message to a file"
          command: |
            echo "Hello World" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
      - run:
          name: "get the current directory. "
          command: |
            pwd && ls -al
  print_output_file:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "get the current directory."
          command: |
            pwd && ls -al
      - run:
          name: "echo content of text file to console"
          command: |
            cat ~/output.txt
  print_pipeline_idx:
    << : *defaults
    steps:
      - print_pipeline_id:
          pipeline_id: <<pipeline.id>>
  job_with_failure:
    docker:
      - image: circleci/node:13:0
    steps:
      - run:
          name: a step that fails
          command: return 1 # force a failure by return a non zero code
      - run:
          name: a step occurs when something fails.
          command: echo "Hello Error!"
          when: on_fail




workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      # - print_hello
      # - print_world:
      #     requires: [print_hello]
      # - print_project-author:
      #     requires: [print_world]
      - save_hello_world_output
          # requires:
          #   - print_project-author
      - print_output_file:
          requires:
            - save_hello_world_output
      - print_pipeline_idx:
          requires:
            - print_output_file
      - job_with_failure:
          requires:
            - print_pipeline_idx